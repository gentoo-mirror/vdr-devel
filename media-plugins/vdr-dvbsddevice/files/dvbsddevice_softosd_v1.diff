diff -ruN dvbsddevice/dvbsdffosd.c dvbsddevice.diff/dvbsdffosd.c
--- dvbsddevice/dvbsdffosd.c	2009-12-29 12:52:48.000000000 +0100
+++ dvbsddevice.diff/dvbsdffosd.c	2010-01-20 20:10:50.355067507 +0100
@@ -13,6 +13,22 @@
 #include <sys/unistd.h>
 #include "vdr/tools.h"
 
+#define SOFTOSD /* ggf. entfernen und in Make.config als –DSOFTOSD aufnehmen */
+#ifdef SOFTOSD
+	#define SOFTOSD_ON							true			/* wenn Setup erw. wird, dann in #define SOFTOSD_ON Setup.softosd o.ä. änd.*/
+	#define SOFTOSD_FADEIN_STEPS				8				/* Steps <=1 schaltet Fading aus */
+	#define SOFTOSD_FADEIN_RATE				25				/* in Hz */
+	#define SOFTOSD_FADEOUT_STEPS				8				/* Steps <=1 schaltet Fading aus */
+	#define SOFTOSD_FADEOUT_RATE				25				/* in Hz */
+	#define SOFTOSD_PALETTE_ONLY				0				/* 1=es wird nur die palette geändert - kann zu Falschfarben führen */
+																	/* 2=wie 1 nur bei der letzten Stufe werden die Bilddaten übertragen um Falschfarben zu korrigieren*/
+	#define SOFTOSD_REFRESH_ONE_PIXEL		true			/* false=immer gesamtes OSD refreshen / true=nur einen Pixel refreshern */
+	#define SOFTOSD_MAX_OSD_SIZE				(720*576)	/* in Pixel kann genutzt werden um große OSDs vom Fading auszuschließen */
+
+	#define SOFTOSD_ALPHA_CORRECTION			0				/* Alpha-Correction in % von -100% bis +100% */
+	#define SOFTOSD_ALPHA_CORRECTION_ABS	0				/*	Alpha-Correction absolut von -255 bis + 255 */
+#endif
+
 // --- cDvbSdFfOsd -----------------------------------------------------------
 
 #define MAXNUMWINDOWS 7 // OSD windows are counted 1...7
@@ -24,6 +40,18 @@
   int osdMem;
   bool shown;
   void Cmd(OSD_Command cmd, int color = 0, int x0 = 0, int y0 = 0, int x1 = 0, int y1 = 0, const void *data = NULL);
+#ifdef SOFTOSD
+	int fade;
+	int fading;
+	int GetOsdSize()
+	{
+		int OsdSize=0;
+		cBitmap *Bitmap;
+ 		for (int i = 0; (Bitmap = GetBitmap(i)) != NULL; i++)
+			OsdSize+=Bitmap->Width()*Bitmap->Height();
+		return OsdSize;
+	}
+#endif
 protected:
   virtual void SetActive(bool On);
 public:
@@ -37,6 +65,9 @@
 cDvbSdFfOsd::cDvbSdFfOsd(int Left, int Top, int OsdDev, uint Level)
 :cOsd(Left, Top, Level)
 {
+#ifdef SOFTOSD
+	fade = fading = 0;
+#endif
   osdDev = OsdDev;
   shown = false;
   if (osdDev < 0)
@@ -73,6 +104,32 @@
            Flush();
         }
      else if (shown) {
+#ifdef SOFTOSD
+			if(SOFTOSD_ON && SOFTOSD_FADEOUT_STEPS>1 && SOFTOSD_MAX_OSD_SIZE>GetOsdSize())
+			{
+				fading = -1;
+				for(fade=SOFTOSD_FADEOUT_STEPS-1; fade>0; fade--)
+				{
+					int64_t flush_start = cTimeMs::Now();
+					Flush();
+					int flush_time	= cTimeMs::Now()-flush_start;
+					dsyslog("SOFTOSD: FadeOut Step %d from %d FlushTime = %d ms", SOFTOSD_FADEOUT_STEPS-fade, SOFTOSD_FADEOUT_STEPS, flush_time);
+					int wait_time	= 1000/SOFTOSD_FADEOUT_RATE;
+					int old_fade = fade;
+					while(flush_time>wait_time && fade>1)
+					{
+						fade--;
+						flush_time -= wait_time;
+					}
+					if(fade != old_fade)
+						dsyslog("SOFTOSD: FadeOut Skip %d steps", old_fade-fade);
+				}
+				dsyslog("SOFTOSD: FadeOut Step %d from %d", SOFTOSD_FADEOUT_STEPS, SOFTOSD_FADEOUT_STEPS);
+				fading = 0;
+			}
+			fade = 0;
+#endif
+
         cBitmap *Bitmap;
         for (int i = 0; (Bitmap = GetBitmap(i)) != NULL; i++) {
             Cmd(OSD_SetWindow, 0, i + 1);
@@ -135,16 +193,62 @@
 
 void cDvbSdFfOsd::Flush(void)
 {
+#ifdef SOFTOSD
+	if (!Active() && !fading)
+		return;
+	cBitmap *Bitmap;
+	if(SOFTOSD_ON && SOFTOSD_FADEIN_STEPS>1 && (Bitmap=GetBitmap(0)))
+	{
+		int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
+		int NumColors;
+		if (fade == 0 && (!shown || Bitmap->Dirty(x1, y1, x2, y2)) && Bitmap->Colors(NumColors) && SOFTOSD_MAX_OSD_SIZE>GetOsdSize())
+		{
+			for(fade=1; fade<=SOFTOSD_FADEIN_STEPS; fade++)
+			{
+				int64_t flush_start = cTimeMs::Now();
+				Flush();
+				fading = 1; /* beim ersten Mal tuts noch weh ... */
+				int flush_time	= cTimeMs::Now()-flush_start;
+				dsyslog("SOFTOSD: FadeIn Step %d from %d FlushTime = %d ms", fade, SOFTOSD_FADEIN_STEPS, flush_time);
+				int wait_time	= 1000/SOFTOSD_FADEIN_RATE;
+				int old_fade = fade;
+				if(fade>1) /*beim ersten Mal kanns lange dauern-nicht springen */
+				{
+					while(flush_time>wait_time && fade<(SOFTOSD_FADEIN_STEPS-1))
+					{
+						fade++;
+						flush_time -= wait_time;
+					}
+				}
+				if(fade != old_fade)
+					dsyslog("SOFTOSD: FadeIn Skip %d steps", fade-old_fade);
+				if(fade == SOFTOSD_FADEIN_STEPS) /* letzter Step -> nicht mehr warten */
+					break;
+			}
+			fading = 0;
+			return;
+		}
+	}
+#else
+
   if (!Active())
      return;
   cBitmap *Bitmap;
+#endif
   for (int i = 0; (Bitmap = GetBitmap(i)) != NULL; i++) {
       Cmd(OSD_SetWindow, 0, i + 1);
       if (!shown)
          Cmd(OSD_Open, Bitmap->Bpp(), Left() + Bitmap->X0(), Top() + Bitmap->Y0(), Left() + Bitmap->X0() + Bitmap->Width() - 1, Top() + Bitmap->Y0() + Bitmap->Height() - 1, (void *)1); // initially hidden!
       int x1 = 0, y1 = 0, x2 = 0, y2 = 0;
+#ifdef SOFTOSD
+      if (!shown || Bitmap->Dirty(x1, y1, x2, y2) || fading) {
+			if (fading && SOFTOSD_REFRESH_ONE_PIXEL)
+				x1 = y1 = x2 = y2 = 0;
+         if (!shown || (fading && !SOFTOSD_REFRESH_ONE_PIXEL)) {
+#else
       if (!shown || Bitmap->Dirty(x1, y1, x2, y2)) {
          if (!shown) {
+#endif
             x1 = y1 = 0;
             x2 = Bitmap->Width() - 1;
             y2 = Bitmap->Height() - 1;
@@ -179,13 +284,26 @@
             tColor colors[NumColors];
             for (int i = 0; i < NumColors; i++) {
                 // convert AARRGGBB to AABBGGRR (the driver expects the colors the wrong way):
+#ifdef SOFTOSD
+					int alpha = (Colors[i]>>24) & 0x000000FF;
+					alpha = alpha + ((SOFTOSD_ALPHA_CORRECTION * alpha) / 100) + SOFTOSD_ALPHA_CORRECTION_ABS;
+					alpha = alpha < 0 ? 0 : (alpha > 255 ? 255 : alpha);
+					int steps = fading < 0 ? SOFTOSD_FADEOUT_STEPS : SOFTOSD_FADEIN_STEPS;
+					if(SOFTOSD_ON && 0<fade && fade<steps)
+						alpha = (alpha * fade) / steps;
+                colors[i] = (alpha << 24) | ((Colors[i] & 0x0000FF) << 16) | (Colors[i] & 0x00FF00) | ((Colors[i] & 0xFF0000) >> 16);
+#else
                 colors[i] = (Colors[i] & 0xFF000000) | ((Colors[i] & 0x0000FF) << 16) | (Colors[i] & 0x00FF00) | ((Colors[i] & 0xFF0000) >> 16);
+#endif
                 }
             Colors = colors;
             //TODO end of stuff that should be fixed in the driver
             Cmd(OSD_SetPalette, 0, NumColors - 1, 0, 0, 0, Colors);
             }
          // commit modified data:
+#ifdef SOFTOSD
+		if(!SOFTOSD_PALETTE_ONLY || !fading || (SOFTOSD_PALETTE_ONLY==2 && fading>0 && fade==SOFTOSD_FADEIN_STEPS))
+#endif
          Cmd(OSD_SetBlock, Bitmap->Width(), x1, y1, x2, y2, Bitmap->Data(x1, y1));
          }
       Bitmap->Clean();
