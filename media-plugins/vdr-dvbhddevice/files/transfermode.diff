diff -Naur dvbhddevice/dvbhddevice.c dvbhddevice_0.0.4dag1/dvbhddevice.c
--- dvbhddevice/dvbhddevice.c	2011-04-17 13:20:22.000000000 +0200
+++ dvbhddevice_0.0.4dag1/dvbhddevice.c	2011-04-30 21:17:28.000000000 +0200
@@ -3,19 +3,21 @@
  *
  * See the README file for copyright information and how to reach the author.
  *
- * $Id: dvbhddevice.c 1.12 2011/04/17 11:20:22 kls Exp $
+ * $Id: dvbhddevice.c 1.2 2010/01/01 15:00:53 kls Exp $
  */
 
 #include <vdr/plugin.h>
 #include "dvbhdffdevice.h"
 #include "setup.h"
 
-static const char *VERSION        = "0.0.3";
+static const char *VERSION        = "0.0.4dag1";
 static const char *DESCRIPTION    = "HD Full Featured DVB device";
 
+#define MAXDVBDEVICES  8
+
 class cPluginDvbhddevice : public cPlugin {
 private:
-  cDvbHdFfDeviceProbe *probe;
+  //cDvbHdFfDeviceProbe *probe;
 public:
   cPluginDvbhddevice(void);
   virtual ~cPluginDvbhddevice();
@@ -23,16 +25,60 @@
   virtual const char *Description(void) { return DESCRIPTION; }
   virtual cMenuSetupPage *SetupMenu(void);
   virtual bool SetupParse(const char *Name, const char *Value);
+  virtual bool Initialize();
   };
 
 cPluginDvbhddevice::cPluginDvbhddevice(void)
 {
-  probe = new cDvbHdFfDeviceProbe;
+  //probe = new cDvbHdFfDeviceProbe;
 }
 
 cPluginDvbhddevice::~cPluginDvbhddevice()
 {
-  delete probe;
+  //delete probe;
+}
+
+bool cPluginDvbhddevice::Initialize()
+{
+  static uint32_t SubsystemIds[] = {
+    0x13C23009, // Technotrend S2-6400 HDFF development samples
+    0x13C2300A, // Technotrend S2-6400 HDFF production version
+    0x00000000
+    };
+  
+  for (int Adapter = 0; Adapter<MAXDVBDEVICES; Adapter++)
+  {
+	  cString FileName;
+	  cReadLine ReadLine;
+	  FILE *f = NULL;
+	  uint32_t SubsystemId = 0;
+	  FileName = cString::sprintf("/sys/class/dvb/dvb%d.frontend0/device/subsystem_vendor", Adapter);
+	  if ((f = fopen(FileName, "r")) != NULL) {
+	     if (char *s = ReadLine.Read(f))
+		SubsystemId = strtoul(s, NULL, 0) << 16;
+	     fclose(f);
+	     }
+	  FileName = cString::sprintf("/sys/class/dvb/dvb%d.frontend0/device/subsystem_device", Adapter);
+	  if ((f = fopen(FileName, "r")) != NULL) {
+	     if (char *s = ReadLine.Read(f))
+		SubsystemId |= strtoul(s, NULL, 0);
+	     fclose(f);
+	     }
+	  for (uint32_t *sid = SubsystemIds; *sid; sid++) {	
+	      if (*sid == SubsystemId) {
+		 FileName = cString::sprintf("/dev/dvb/adapter%d/osd0", Adapter);		
+		 int fd = open(FileName, O_RDWR);	
+		 if (fd != -1) { //TODO treat the second path of the S2-6400 as a budget device	
+		    close(fd);
+		    dsyslog("creating cDvbHdFfDevice");
+		    new cDvbHdFfDevice(Adapter, 0);            
+		    return true;
+		    }
+		 }		
+	      }    
+  }
+
+  return false;
 }
 
 cMenuSetupPage *cPluginDvbhddevice::SetupMenu(void)
diff -Naur dvbhddevice/dvbhdffdevice.c dvbhddevice_0.0.4dag1/dvbhdffdevice.c
--- dvbhddevice/dvbhdffdevice.c	2011-05-01 13:45:39.218078665 +0200
+++ dvbhddevice_0.0.4dag1/dvbhdffdevice.c	2011-04-30 12:25:45.000000000 +0200
@@ -18,6 +18,7 @@
 #include <sys/mman.h>
 #include <vdr/eitscan.h>
 #include <vdr/transfer.h>
+#include <vdr/dvbdevice.h>
 #include "hdffosd.h"
 #include "setup.h"
 
@@ -26,12 +27,14 @@
 int cDvbHdFfDevice::devHdffOffset = -1;
 
 cDvbHdFfDevice::cDvbHdFfDevice(int Adapter, int Frontend)
-:cDvbDevice(Adapter, Frontend)
+:cDevice()
 {
   spuDecoder = NULL;
   audioChannel = 0;
   playMode = pmNone;
   mHdffCmdIf = NULL;
+  adapter = Adapter;
+  frontend = Frontend;
 
   // Devices that are only present on cards with decoders:
 
@@ -75,11 +78,25 @@
   // caused segfaults. Besides, the program is about to terminate anyway...
 }
 
+cString cDvbHdFfDevice::DvbName(const char *Name, int Adapter, int Frontend)
+{
+  return cString::sprintf("%s%d/%s%d", DEV_DVB_ADAPTER, Adapter, Name, Frontend);
+}
+
+int cDvbHdFfDevice::DvbOpen(const char *Name, int Adapter, int Frontend, int Mode, bool ReportError)
+{
+  cString FileName = DvbName(Name, Adapter, Frontend);
+  int fd = open(FileName, Mode);
+  if (fd < 0 && ReportError)
+     LOG_ERROR_STR(*FileName);
+  return fd;
+}
+
 void cDvbHdFfDevice::MakePrimaryDevice(bool On)
 {
   if (On)
      new cHdffOsdProvider(mHdffCmdIf);
-  cDvbDevice::MakePrimaryDevice(On);
+  cDevice::MakePrimaryDevice(On);
 }
 
 bool cDvbHdFfDevice::HasDecoder(void) const
@@ -236,6 +253,7 @@
   DelPid(pidHandles[ptDolby].pid);
 }
 
+/*
 bool cDvbHdFfDevice::SetChannelDevice(const cChannel *Channel, bool LiveView)
 {
   int apid = Channel->Apid(0);
@@ -295,6 +313,7 @@
 
   return true;
 }
+*/
 
 int cDvbHdFfDevice::GetAudioChannelDevice(void)
 {
@@ -364,7 +383,7 @@
      if (playMode == pmNone)
         TurnOffLiveMode(true);
 
-     mHdffCmdIf->CmdAvSetPlayMode(1, Transferring());
+     mHdffCmdIf->CmdAvSetPlayMode(1, Transferring() || (cTransferControl::ReceiverDevice() == this));
      mHdffCmdIf->CmdAvSetStc(0, 100000);
      mHdffCmdIf->CmdAvEnableSync(0, true);
      mHdffCmdIf->CmdAvEnableVideoAfterStop(0, true);
@@ -720,42 +739,3 @@
   return NULL;
 }
 
-// --- cDvbHdFfDeviceProbe ---------------------------------------------------
-
-bool cDvbHdFfDeviceProbe::Probe(int Adapter, int Frontend)
-{
-  static uint32_t SubsystemIds[] = {
-    0x13C23009, // Technotrend S2-6400 HDFF development samples
-    0x13C2300A, // Technotrend S2-6400 HDFF production version
-    0x00000000
-    };
-  cString FileName;
-  cReadLine ReadLine;
-  FILE *f = NULL;
-  uint32_t SubsystemId = 0;
-  FileName = cString::sprintf("/sys/class/dvb/dvb%d.frontend%d/device/subsystem_vendor", Adapter, Frontend);
-  if ((f = fopen(FileName, "r")) != NULL) {
-     if (char *s = ReadLine.Read(f))
-        SubsystemId = strtoul(s, NULL, 0) << 16;
-     fclose(f);
-     }
-  FileName = cString::sprintf("/sys/class/dvb/dvb%d.frontend%d/device/subsystem_device", Adapter, Frontend);
-  if ((f = fopen(FileName, "r")) != NULL) {
-     if (char *s = ReadLine.Read(f))
-        SubsystemId |= strtoul(s, NULL, 0);
-     fclose(f);
-     }
-  for (uint32_t *sid = SubsystemIds; *sid; sid++) {
-      if (*sid == SubsystemId) {
-         FileName = cString::sprintf("/dev/dvb/adapter%d/osd0", Adapter);
-         int fd = open(FileName, O_RDWR);
-         if (fd != -1) { //TODO treat the second path of the S2-6400 as a budget device
-            close(fd);
-            dsyslog("creating cDvbHdFfDevice");
-            new cDvbHdFfDevice(Adapter, Frontend);
-            return true;
-            }
-         }
-      }
-  return false;
-}
diff -Naur dvbhddevice/dvbhdffdevice.h dvbhddevice_0.0.4dag1/dvbhdffdevice.h
--- dvbhddevice/dvbhdffdevice.h	2010-03-13 12:18:13.000000000 +0100
+++ dvbhddevice_0.0.4dag1/dvbhdffdevice.h	2011-04-30 11:16:21.000000000 +0200
@@ -3,23 +3,25 @@
  *
  * See the README file for copyright information and how to reach the author.
  *
- * $Id: dvbhdffdevice.h 1.6 2010/03/13 11:18:13 kls Exp $
+ * $Id: dvbhdffdevice.h 1.2 2010/01/04 11:00:16 kls Exp $
  */
 
 #ifndef __DVBHDFFDEVICE_H
 #define __DVBHDFFDEVICE_H
 
 #include "hdffcmd.h"
-#include "vdr/dvbdevice.h"
+#include "vdr/device.h"
 #include "vdr/dvbspu.h"
 
 /// The cDvbHdFfDevice implements a DVB device which can be accessed through the Linux DVB driver API.
 
-class cDvbHdFfDevice : public cDvbDevice {
+class cDvbHdFfDevice : public cDevice {
 private:
-  int fd_osd, fd_audio, fd_video;
+  int adapter, frontend, fd_osd, fd_audio, fd_video;
 protected:
   virtual void MakePrimaryDevice(bool On);
+  static cString DvbName(const char *Name, int Adapter, int Frontend);
+  static int DvbOpen(const char *Name, int Adapter, int Frontend, int Mode, bool ReportError = false);
 public:
   static bool Probe(int Adapter, int Frontend);
   cDvbHdFfDevice(int Adapter, int Frontend);
@@ -37,8 +39,8 @@
 
 private:
   void TurnOffLiveMode(bool LiveView);
-protected:
-  virtual bool SetChannelDevice(const cChannel *Channel, bool LiveView);
+//protected:
+  //virtual bool SetChannelDevice(const cChannel *Channel, bool LiveView);
 
 // PID handle facilities
 
@@ -115,9 +117,9 @@
   HDFF::cHdffCmdIf *mHdffCmdIf;
 };
 
-class cDvbHdFfDeviceProbe : public cDvbDeviceProbe {
-public:
-  virtual bool Probe(int Adapter, int Frontend);
-  };
+//class cDvbHdFfDeviceProbe : public cDvbDeviceProbe {
+//public:
+  //virtual bool Probe(int Adapter, int Frontend);
+  //};
 
 #endif //__DVBHDFFDEVICE_H
